{"name":"ChunkIt","tagline":"Crop, Extract, De-sprite and Play","body":"## Welcome words!\r\nA jQuery plugin and image processing utility. This is useful when you are playing with images. This enables you to extract portion of image, crop, de-sprite and many more.\r\n\r\n## Demo\r\n[Show me demo](http://hilarudeens.github.io/ChunkIt/demo)\r\n\r\n## Browser Requirements\r\nThis plugin is using HTML5 canvas internally. Hence, It require IE9 or higher version and latest Mozilla, Chrome. Please read following url for [browser support](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas)\r\n\r\n## Options\r\n- imgURL\r\n- maxContainerWidth\r\n- scaleImage\r\n- startXY\r\n- endXY\r\n- cellsInRow\r\n- cellsInColumn\r\n- shrinkCellDimension\r\n- cropExtraSpaces\r\n- shuffle\r\n- gridCellWrapperTpl\r\n- gridRowWrapperTpl\r\n- gridBodyWrapperTpl\r\n\r\n## Callbacks\r\n- onImageLoad : function($event, currentObj, $imageElem) \r\n- onGetGridMetaData : function($event, currentObj, gridData)\r\n- onShuffleCoordinates : function($event, currentObj, gridData)\r\n- onCellWrapping : function($event, currentObj, $wrappedCellElem, $wrappedParentElem)\r\n- onRowWrapping : function($event, currentObj, $wrappedRowElem, $wrappedParentElem)\r\n- onGetGridElem : function($event, currentObj, $gridElem)\r\n- onAfterFinish : function($event, currenObj)\r\n\r\n## Events\r\n- imageLoad\r\n- getGridMetaData\r\n- shuffleCoordinates\r\n- cellWrapping\r\n- rowWrapping\r\n- getGridElem\r\n- afterFinish\r\n\r\n## Options\r\n## imgURL\r\n\r\n**Type:** String | **Default:** ''\r\n\r\nThis is act as a source for ChunkIt. It can be either remote url or base64 encoded data url. This is used to feed image data. Alternative, User can feed image url from DOM elements. It reads `data-chunkit-imgurl=\"images/<img-name>\"`.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\timgURL : 'images/someImage.jpg'\r\n});`\r\n`// OR`\r\n`// ChunkIt url in inline <div class=\"selector\" data-chunkit-imgurl=\"images/shuffle.jpg\" ></div>`\r\n`$('.selector').chunkIt();`\r\n\r\n## maxContainerWidth\r\n\r\n**Type:** Number | **Default:** 0\r\n\r\nThis option specifies grid or table maximum possible width. This is used to adjust the cropped image cells width to fit container. It is doing intelligent calculation based on number of cells in a row and width of each cells to make perfect grid option.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\tmaxContainerWidth: 300 /* equivalent to 300px */\r\n});`\r\n\r\n## scaleImage\r\n\r\n**Type:** Boolean | **Default:** false\r\n\r\nThis is set to automatically adjust maximum width of image container(maxContainerWidth) based on image width. If this options is true, then maxContainerWidth become disabled internally.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\tscaleImage: true\r\n});`\r\n\r\n## startXY\r\n\r\n**Type:** Array | **Default:** [0, 0] `-> [top, left]`\r\n\r\nSets starting point to crop image. The default indicates the left-top corner of the image. It can be vary from [0, 0] to [image-width, image-height]. Array should contain any positive number. Any invalid or negative automatically turns into [0, 0].\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\tstartXY: [50,50] /* equivalent to [50px from top, 50px from left] */ \r\n});`\r\n\r\n## endXY\r\n\r\n**Type:** Array | **Default:** [0, 0] `is equivalent to [<image width>, <image height>]`\r\n\r\nThis option sets end point to crop image. The default indicates the right-bottom corner of the image. It can be vary from [<greater than 0px>, <greater than 0px>] to [<image width>, <image height>]. Array should contain any positive number. Any invalid or negative automatically turns into `[<image width>, <image height>]`.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\tendXY: [50,50] /* equivalent to 50px from top and 50px from left */\r\n});`\r\n\r\n## cellsInRow\r\n\r\n**Type:** Number | **Default:** 5 \r\n\r\nThis option specifies number of cell in a row. This is directly affect cells width. Default option forces the cell width to take image’s width.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({ cellsInRow: 5});`\r\n\r\n## cellsInColumn\r\n\r\n**Type:** Number | **Default:** 5\r\n\r\nThis option specifies number of cell in a row. This is directly affect cells width. Default option forces the cell width to take image’s width.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({ cellsInColumn: 5});`\r\n\r\n## shrinkCellDimension\r\n\r\n**Type:** Boolean | **Default:** true\r\n\r\nThis option forces endXY to image’s width and height when endXY set greater than image dimension. This option avoids excess white space in right and bottom side of cropped region. This is internally override the option cropExtraSpaces:true.\r\nThis option ensures all the cropped cells dimensions are equal. \r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\tshrinkCellDimension: true\r\n});`\r\n\r\n## cropExtraSpaces\r\n\r\n**Type:** Boolean | **Default:** false\r\n\r\nThis option forces endXY to image’s width and height when endXY set greater than image dimension. Unlike shrinkCellDimension, it is adjusting cells dimension which are in image edge. That is, cells are cropped from right and bottom portion of image.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({￼￼￼\r\n\tcropExtraSpaces: true\r\n});`\r\n\r\n## shuffle\r\n\r\n**Type:** Boolean | **Default:** false\r\n\r\nThis option plots cropped cell in random order. This is optional and creative option. And it is recommended to use when shrinkCellDimension is set with true.\r\n\r\n**Code Example:**\r\n`$('.selector').chunkIt({\r\n\tshrinkCellDimension: true /* This option should be true shuffle: true */\r\n});`\r\n\r\n## gridCellWrapperTpl\r\n\r\n**Type:** String | **Default:** `'<li class=\"cell\"></li>'`\r\n\r\nProvide helper functionality to customized HTML element wrapper template. Default option creates list tag wrapped around cropped image portion.\r\n\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\tgridCellWrapperTpl: '<div class=”customClass” customAttribute=”attrVal” ></div>'\r\n});`\r\n\r\n## gridRowWrapperTpl\r\n\r\n**Type:** String | **Default:** ''\r\n\r\nProvide helper functionality to customized HTML element wrapper template. It creates the parent HTML element for gridCellWrapperTpl templates along with cropped image portions.\r\n￼￼\r\n**Code Example:**\r\n\r\n`$('.selector').chunkIt({\r\n\tgridRowWrapperTpl: '<p class=”customClass” customAttribute=”attrVal” ></p>'\r\n});`\r\n\r\n## gridBodyWrapperTpl\r\n\r\n**Type: String** | **Default:** `'<ul class=\"grid\"></ul>'`\r\n\r\nProvide helper functionality to customized HTML element wrapper template. It creates the parent HTML element for gridRowWrapperTpl templates along with cropped image portions.\r\n\r\n**Code Example:**\r\n\r\n$('.selector').chunkIt({\r\n\tgridBodyWrapperTpl: '<div class=”customClass” customAttribute=”attrVal” ></div>'\r\n});\r\n\r\n## Callbacks\r\n\r\n## onImageLoad : function($event, currentObj, $imageElem)\r\n\r\nThis callback function will be executed after image load.\r\n\r\n**Code Example**\r\n\r\n`$('.selector').chunkIt({\r\n\tonImageLoad: function($event, currentObj, $imageElem){\r\n\t\tconsole.log($imageElem.attr('src'));\r\n\t}\r\n});`\r\n\r\n## onGetGridMetaData : function($event, currentObj, gridData)\r\n\r\nThis callback function will be executed after generating cropping co-ordinates.\r\n\r\n## onShuffleCoordinates : function($event, currentObj, gridData)\r\n\r\nThis callback function will be executed on after shuffle done.\r\n\r\n## onCellWrapping : function($event, currentObj, $wrappedCellElem, $wrappedParentElem)\r\n\r\nThis callback function will be executed on wrapping cell DOM element by using wrapper template.\r\n\r\n## onRowWrapping : function($event, currentObj, $wrappedRowElem, $wrappedParentElem)\r\n\r\nThis callback function will be executed on wrapping row DOM elements by using wrapper template.\r\n\r\n## onGetGridElem : function($event, currentObj, $gridElem)\r\n\r\nThis callback function will be executed on generating grids DOM element.\r\n\r\n## onAfterFinish : function($event, currenObj)\r\n\r\nThis callback function will be executed on after inserting grid in **document** object.\r\n\r\n## Events\r\n\r\nEvents are respective to callback. In real, the callbacks in option are interlly attached events. The only difference is, option define callbacks takes precedence than externall attached events. \r\n\r\n## imageLoad\r\n\r\nThis imageLoad event will be triggered after image load.\r\n\r\n**Code Example**\r\n\r\n`$('.selector').on('imageLoad', function($event, currentObj, $imageElem){\r\n\tconsole.log($imageElem.attr('src'));\r\n});`\r\n\r\n## getGridMetaData\r\n\r\nThis getGridMetaData event will be triggered after generating cropping co-ordinates.\r\n\r\n## shuffleCoordinates\r\n\r\nThis shuffleCoordinates event will be triggered on after shuffle done.\r\n\r\n## cellWrapping\r\n\r\nThis cellWrapping event will be triggered on wrapping cell DOM element by using wrapper template.\r\n\r\n## rowWrapping\r\n\r\nThis rowWrapping event will be triggered on wrapping row DOM elements by using wrapper template.\r\n\r\n## getGridElem\r\n\r\nThis getGridElem event will be triggered on generating grids DOM element.\r\n\r\n## afterFinish\r\n\r\nThis afterFinish event will be triggered on after inserting grid in **document** object.\r\n\r\n## Author\r\nHilarudeen Sheik Allaudeen(@hilarudeens)\r\n\r\n[Email](hilar.udeen@gmail.com)\r\n\r\n## Support or Contact\r\nPlease open the issues in [GitHub](https://github.com/hilarudeens/ChunkIt/issues)\r\n\r\n## License \r\nThe MIT License [MIT](https://github.com/hilarudeens/ChunkIt/blob/master/LICENSE)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}